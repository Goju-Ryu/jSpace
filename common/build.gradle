// General settings {{{
plugins {
    id 'com.adarshr.test-logger' version '1.3.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
	mavenCentral()
}

dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-core:2.19.0")
    testCompile("org.mockito:mockito-junit-jupiter:2.19.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.jyaml:jyaml:1.2'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'nl.jqno.equalsverifier:equalsverifier:2.4.7'
}

compileJava {
    options.debug = true
}
// }}}
// JavaDoc {{{
javadoc {
//    inputs.property("moduleName", moduleName)
//    doFirst {
//        options.addStringOption('-module-path', classpath.asPath)
//    }
//    source = sourceSets.main.allJava
//    classpath = configurations.compile
  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }
}
// }}}
// Tasks {{{
// add a task for each jar you would like produced, use this one as a template
task fridgeJar(type: Jar) {
	archiveName = "fridge.jar" // change me
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.fridge.Fridge' // change me
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task diningPhilosophersJar(type: Jar) {
	archiveName = "diningPhilosophers.jar" // change me
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.df.DiningPhilosophers' // change me
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
task distributedDiningPhilosophersJar(type: Jar) {
	archiveName = "distributedDiningPhiloposhers.jar" // change me
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.df.DistributedDiningPhilosophers' // change me
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task helloworldJar(type: Jar) {
	archiveName = "helloworld.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.helloworld.HelloWorld'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task remoteworldJar(type: Jar) {
	archiveName = "remoteworld.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.remoteworld.RemoteHelloWorld'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task serverconnJar(type: Jar) {
	archiveName = "serverconn.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.serverconn.ServerConnectionTester'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task pingpongJar(type: Jar) {
	archiveName = "pingpong.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.pingpong.PingPong'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


// Build the main server jar
task mainServerJar(type: Jar) {
	archiveName = "server.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.serverApp.ServerApp'
			//'Main-Class': 'org.jspace.examples.chat.server.Server'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Build the serialize jar
task serializeJar(type: Jar) {
	archiveName = "serialize.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.serialize.Serialize'
			//'Main-Class': 'org.jspace.examples.chat.server.Server'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Build the chatServer jar
task chatServerJar(type: Jar) {
	archiveName = "chatServer.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.chat.chatServer.ChatServer'
			//'Main-Class': 'org.jspace.examples.chat.server.Server'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Build the Alice client jar
task chatAliceJar(type: Jar) {
	archiveName = "Alice.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.chat.chatAlice.Alice'
			//'Main-Class': 'org.jspace.examples.chat.server.Server'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Build the Bob client jar
task chatBobJar(type: Jar) {
	archiveName = "Bob.jar"
	from sourceSets.main.output
	manifest {
		attributes(
			'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
			'Main-Class': 'org.jspace.examples.chat.chatBob.Bob'
			//'Main-Class': 'org.jspace.examples.chat.server.Server'
		)
	}
    // include dependencies to create a "fat jar"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// include projects to be build here
artifacts {
  archives fridgeJar
  archives diningPhilosophersJar
  archives distributedDiningPhilosophersJar
  archives helloworldJar
  archives pingpongJar
  archives remoteworldJar
  archives serverconnJar
  archives chatAliceJar
  archives chatBobJar
  archives chatServerJar
  archives mainServerJar
  archives serializeJar
}
// }}}
// Testing and JaCoCo {{{
test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/jacocoReport")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
// }}}
